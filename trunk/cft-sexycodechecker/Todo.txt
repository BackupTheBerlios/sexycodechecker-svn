********************************************************************************
[1] CHECKER AND RULES INTERACTION **********************************************

Rules have a vertical hierarchy. Common variables are defined in the abstract 
classes, and clients use them. 

The pattern should become this:

A Context will be shared among all rules.

The common handlings will be done once by a common preprocessor before the rules.

The rules will read state from the context, and do only their own peculiar part.

This will solve still unsolved FxCop violations.

[2] CALLING FROM THE COMMAND LINE **********************************************
File expansion in Windows Vista: it is on behalf of the programmer to handle it.

/*
C:\Users\cat\Documents\Visual Studio 2008\Projects\cft-sexycodechecker\cft-sexyc
odechecker\bin\Release>cft-sexycodechecker.exe meow -v /? --help *.exe *.xml
param 0: meow
param 1: -v
param 2: /?
param 3: --help
param 4: *.exe
param 5: *.xml

C:\Users\cat\Documents\Visual Studio 2008\Projects\cft-sexycodechecker\cft-sexyc
odechecker\bin\Release>
*/

File expansion in Cygwin: it is on the behalf of the shell to handle it.

/*
cat@crimson /cygdrive/c/Users/cat/Documents/Visual Studio 2008/Projects/cft-sexy
codechecker/cft-sexycodechecker/bin/Release
$ ./cft-sexycodechecker.exe meow -v /? --help *.exe *.xml
param 0: meow
param 1: -v
param 2: /?
param 3: --help
param 4: cft-sexycodechecker.exe
param 5: TestResult.xml
param 6: cft-sexycodechecker.exe.VisualState.xml
param 7: nunit.framework.xml

cat@crimson /cygdrive/c/Users/cat/Documents/Visual Studio 2008/Projects/cft-sexy
codechecker/cft-sexycodechecker/bin/Release
$
*/
